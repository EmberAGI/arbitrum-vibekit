# Production Dockerfile for Doc-RAG Agent
FROM node:20-alpine AS builder

# Install pnpm
RUN npm install -g pnpm@latest

WORKDIR /app

# Copy workspace files
COPY package.json pnpm-workspace.yaml ./
COPY lib/arbitrum-vibekit-core/package.json ./lib/arbitrum-vibekit-core/
COPY lib/mcp-tools/doc-rag-mcp-server/package.json ./lib/mcp-tools/doc-rag-mcp-server/
COPY examples/doc-rag-agent/package.json ./examples/doc-rag-agent/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build everything
RUN pnpm build

# Production stage
FROM node:20-alpine

# Install pnpm and production dependencies for Puppeteer
RUN npm install -g pnpm@latest && \
    apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    dumb-init

# Tell Puppeteer to use installed Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser \
    NODE_ENV=production

WORKDIR /app

# Copy built application
COPY --from=builder /app/package.json /app/pnpm-workspace.yaml ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/lib ./lib
COPY --from=builder /app/examples/doc-rag-agent ./examples/doc-rag-agent

WORKDIR /app/examples/doc-rag-agent

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    chown -R nodejs:nodejs /app

USER nodejs

# Expose port
EXPOSE 3008

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the agent
CMD ["node", "dist/index.js"] 
name: ü§ñ Agent Template Request
description: Propose a new agent template for the templates directory
title: "[AGENT] "
labels: ["enhancement", "agent-template"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        Thanks for proposing a new agent template! Templates help developers quickly build DeFi agents.

  - type: input
    id: agent-name
    attributes:
      label: üè∑Ô∏è Agent Name
      description: What should this agent be called?
      placeholder: e.g., "DCA Bot Agent", "Liquidation Prevention Agent", "Yield Optimizer Agent"
    validations:
      required: true

  - type: dropdown
    id: agent-category
    attributes:
      label: üèóÔ∏è Agent Category
      description: What type of DeFi operations will this agent perform?
      options:
        - Trading/Swapping
        - Lending/Borrowing
        - Liquidity Management
        - Yield Farming
        - Risk Management
        - Arbitrage
        - Portfolio Management
        - Cross-chain Operations
        - Analytics/Monitoring
        - Other
    validations:
      required: true

  - type: textarea
    id: agent-description
    attributes:
      label: üìù Agent Description
      description: Describe what this agent does and its key features
      placeholder: |
        This agent automatically...
        Key features:
        - Feature 1: ...
        - Feature 2: ...
        - Feature 3: ...
        
        Target users: DeFi traders who want to...
    validations:
      required: true

  - type: textarea
    id: protocols
    attributes:
      label: üîå Required Protocols
      description: Which DeFi protocols should this agent integrate with?
      placeholder: |
        Primary protocols:
        - Uniswap V3 (for swapping)
        - Aave V3 (for lending)
        - Camelot (for liquidity)
        
        Optional protocols:
        - 1inch (for better routing)
        - Compound (alternative lending)
    validations:
      required: true

  - type: textarea
    id: core-functionality
    attributes:
      label: ‚öôÔ∏è Core Functionality
      description: What are the main functions/skills this agent should have?
      placeholder: |
        Skills the agent should provide:
        1. Monitor portfolio positions
        2. Execute rebalancing trades
        3. Calculate optimal allocation
        4. Risk assessment and alerts
        5. Historical performance tracking
        
        MCP tools needed:
        - getPortfolioBalance
        - executeRebalance  
        - calculateOptimalWeights
        - assessRisk
    validations:
      required: true

  - type: dropdown
    id: complexity
    attributes:
      label: üìä Agent Complexity
      description: How complex is this agent to implement?
      options:
        - Beginner - Simple operations, good for learning
        - Intermediate - Multiple protocols, moderate logic
        - Advanced - Complex strategies, sophisticated algorithms
        - Expert - Research-level, cutting-edge DeFi
    validations:
      required: true

  - type: textarea
    id: user-scenarios
    attributes:
      label: üéØ User Scenarios
      description: Provide specific scenarios where users would use this agent
      placeholder: |
        Scenario 1: A DeFi user wants to automatically rebalance their portfolio monthly
        - User sets target allocations (50% ETH, 30% USDC, 20% ARB)
        - Agent monitors current balances daily
        - When drift exceeds 5%, agent executes rebalancing trades
        
        Scenario 2: Risk management for leveraged positions
        - User has borrowed against collateral on Aave
        - Agent monitors health factor continuously
        - If health factor drops below 1.5, agent repays debt or adds collateral
    validations:
      required: true

  - type: textarea
    id: configuration
    attributes:
      label: ‚öôÔ∏è Configuration Options
      description: What should users be able to configure?
      placeholder: |
        Required configuration:
        - Target token allocations
        - Risk tolerance level
        - Rebalancing frequency
        - Slippage tolerance
        
        Optional configuration:
        - Preferred DEXs for swapping
        - Gas price strategy
        - Emergency stop conditions
        - Notification preferences

  - type: dropdown
    id: automation-level
    attributes:
      label: ü§ñ Automation Level
      description: How automated should this agent be?
      options:
        - Manual - User triggers each action
        - Semi-automated - Agent suggests, user approves
        - Automated - Agent executes based on conditions
        - Fully autonomous - Agent manages everything independently
    validations:
      required: true

  - type: textarea
    id: risk-considerations
    attributes:
      label: ‚ö†Ô∏è Risk Considerations
      description: What risks should users be aware of?
      placeholder: |
        DeFi risks:
        - Smart contract risk from integrated protocols
        - Impermanent loss in liquidity positions
        - Liquidation risk in leveraged positions
        
        Agent-specific risks:
        - Slippage during rebalancing
        - Gas cost impact on small portfolios
        - Timing risks in volatile markets
        
        Mitigation strategies:
        - Conservative default settings
        - Clear risk warnings in documentation
        - Emergency stop functionality

  - type: textarea
    id: testing-approach
    attributes:
      label: üß™ Testing Requirements
      description: How should this agent be tested?
      placeholder: |
        Unit tests:
        - Portfolio calculation logic
        - Risk assessment algorithms
        - Configuration validation
        
        Integration tests:
        - Protocol interactions
        - End-to-end rebalancing flows
        - Error handling scenarios
        
        Live testing:
        - Testnet integration tests
        - Small mainnet trials
        - Performance benchmarks

  - type: textarea
    id: similar-projects
    attributes:
      label: üîç Similar Projects/References
      description: Are there similar agents or projects we can reference?
      placeholder: |
        Similar projects:
        - Yearn Finance vaults (yield optimization)
        - Balancer smart pools (portfolio management)
        - DeFi Pulse Index methodology
        
        Reference implementations:
        - GitHub repos, documentation, or research papers
        - Academic papers on portfolio optimization
        - Existing DeFi strategies to model after

  - type: checkboxes
    id: contribution
    attributes:
      label: ü§ù Contribution Interest
      options:
        - label: I'm willing to implement this agent template
        - label: I can help with the design and architecture
        - label: I can provide domain expertise for the DeFi strategy
        - label: I can help with testing and validation
        - label: I can write documentation and examples

  - type: textarea
    id: additional
    attributes:
      label: üìé Additional Information
      description: Any other relevant details, mockups, or references
      placeholder: |
        Technical specifications, architecture diagrams, 
        UI mockups, or any other supporting materials...

  - type: checkboxes
    id: checklist
    attributes:
      label: ‚úÖ Pre-submission Checklist
      options:
        - label: I have searched existing issues and templates to avoid duplicates
          required: true
        - label: I have clearly described the agent's purpose and functionality
          required: true
        - label: I have identified the required protocols and integrations
          required: true
        - label: I have considered the risks and testing requirements
          required: true
        - label: I have provided realistic user scenarios
          required: true